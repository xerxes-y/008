version: '3.8'

services:
  # Kafka Infrastructure
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka-data:/var/lib/kafka/data

  # Database Infrastructure
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_DB: qa_testing
      POSTGRES_USER: qa_user
      POSTGRES_PASSWORD: qa_password
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data

  # Docker Model Runner for LLM
  llm-runner:
    image: ollama/ollama:latest
    container_name: llm-runner
    ports:
      - "11434:11434"
    volumes:
      - llm-data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0

  # Sample Microservices for Testing
  user-service:
    build:
      context: ./microservices/user-service
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "8001:8000"
    environment:
      - DATABASE_URL=postgresql://qa_user:qa_password@postgres:5432/qa_testing
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    volumes:
      - ./microservices/user-service:/app

  order-service:
    build:
      context: ./microservices/order-service
      dockerfile: Dockerfile
    container_name: order-service
    ports:
      - "8002:8000"
    environment:
      - DATABASE_URL=postgresql://qa_user:qa_password@postgres:5432/qa_testing
      - KAFKA_BROKERS=kafka:29092
    depends_on:
      - postgres
      - kafka
    volumes:
      - ./microservices/order-service:/app

  notification-service:
    build:
      context: ./microservices/notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    ports:
      - "8003:8000"
    environment:
      - KAFKA_BROKERS=kafka:29092
      - REDIS_URL=redis://redis:6379
    depends_on:
      - kafka
      - redis
    volumes:
      - ./microservices/notification-service:/app

  # LLM QA Agent
  qa-agent:
    build:
      context: ./qa-agent
      dockerfile: Dockerfile
    container_name: qa-agent
    environment:
      - LLM_API_URL=http://llm-runner:11434/api
      - KAFKA_BROKERS=kafka:29092
      - POSTGRES_URL=postgresql://qa_user:qa_password@postgres:5432/qa_testing
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
    depends_on:
      - llm-runner
      - kafka
      - postgres
      - redis
      - user-service
      - order-service
      - notification-service
    volumes:
      - ./qa-agent:/app
      - ./test-results:/app/test-results
    command: python main.py

  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka

volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  postgres-data:
  redis-data:
  llm-data:
